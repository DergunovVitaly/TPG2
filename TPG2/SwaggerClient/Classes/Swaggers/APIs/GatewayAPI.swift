//
// GatewayAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class GatewayAPI {
    /**

     - parameter controllerName: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayControllerNameDelete(controllerName: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiGatewayControllerNameDeleteWithRequestBuilder(controllerName: controllerName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/Gateway/{controllerName}
     - 

     - :
       - type: http
       - name: Bearer
     - parameter controllerName: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiGatewayControllerNameDeleteWithRequestBuilder(controllerName: String) -> RequestBuilder<Void> {
        var path = "/api/Gateway/{controllerName}"
        let controllerNamePreEscape = "\(controllerName)"
        let controllerNamePostEscape = controllerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{controllerName}", with: controllerNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter controllerName: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayControllerNameGet(controllerName: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiGatewayControllerNameGetWithRequestBuilder(controllerName: controllerName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/Gateway/{controllerName}
     - 

     - :
       - type: http
       - name: Bearer
     - parameter controllerName: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiGatewayControllerNameGetWithRequestBuilder(controllerName: String) -> RequestBuilder<Void> {
        var path = "/api/Gateway/{controllerName}"
        let controllerNamePreEscape = "\(controllerName)"
        let controllerNamePostEscape = controllerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{controllerName}", with: controllerNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter controllerName: (path)  
     - parameter method: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayControllerNameMethodDelete(controllerName: String, method: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiGatewayControllerNameMethodDeleteWithRequestBuilder(controllerName: controllerName, method: method).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/Gateway/{controllerName}/{method}
     - 

     - :
       - type: http
       - name: Bearer
     - parameter controllerName: (path)  
     - parameter method: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiGatewayControllerNameMethodDeleteWithRequestBuilder(controllerName: String, method: String) -> RequestBuilder<Void> {
        var path = "/api/Gateway/{controllerName}/{method}"
        let controllerNamePreEscape = "\(controllerName)"
        let controllerNamePostEscape = controllerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{controllerName}", with: controllerNamePostEscape, options: .literal, range: nil)
        let methodPreEscape = "\(method)"
        let methodPostEscape = methodPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{method}", with: methodPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter controllerName: (path)  
     - parameter method: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayControllerNameMethodGet(controllerName: String, method: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiGatewayControllerNameMethodGetWithRequestBuilder(controllerName: controllerName, method: method).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/Gateway/{controllerName}/{method}
     - 

     - :
       - type: http
       - name: Bearer
     - parameter controllerName: (path)  
     - parameter method: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiGatewayControllerNameMethodGetWithRequestBuilder(controllerName: String, method: String) -> RequestBuilder<Void> {
        var path = "/api/Gateway/{controllerName}/{method}"
        let controllerNamePreEscape = "\(controllerName)"
        let controllerNamePostEscape = controllerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{controllerName}", with: controllerNamePostEscape, options: .literal, range: nil)
        let methodPreEscape = "\(method)"
        let methodPostEscape = methodPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{method}", with: methodPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter controllerName: (path)  
     - parameter method: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayControllerNameMethodPost(controllerName: String, method: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiGatewayControllerNameMethodPostWithRequestBuilder(controllerName: controllerName, method: method).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Gateway/{controllerName}/{method}
     - 

     - :
       - type: http
       - name: Bearer
     - parameter controllerName: (path)  
     - parameter method: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiGatewayControllerNameMethodPostWithRequestBuilder(controllerName: String, method: String) -> RequestBuilder<Void> {
        var path = "/api/Gateway/{controllerName}/{method}"
        let controllerNamePreEscape = "\(controllerName)"
        let controllerNamePostEscape = controllerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{controllerName}", with: controllerNamePostEscape, options: .literal, range: nil)
        let methodPreEscape = "\(method)"
        let methodPostEscape = methodPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{method}", with: methodPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter controllerName: (path)  
     - parameter method: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayControllerNameMethodPut(controllerName: String, method: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiGatewayControllerNameMethodPutWithRequestBuilder(controllerName: controllerName, method: method).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /api/Gateway/{controllerName}/{method}
     - 

     - :
       - type: http
       - name: Bearer
     - parameter controllerName: (path)  
     - parameter method: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiGatewayControllerNameMethodPutWithRequestBuilder(controllerName: String, method: String) -> RequestBuilder<Void> {
        var path = "/api/Gateway/{controllerName}/{method}"
        let controllerNamePreEscape = "\(controllerName)"
        let controllerNamePostEscape = controllerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{controllerName}", with: controllerNamePostEscape, options: .literal, range: nil)
        let methodPreEscape = "\(method)"
        let methodPostEscape = methodPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{method}", with: methodPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter controllerName: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayControllerNamePost(controllerName: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiGatewayControllerNamePostWithRequestBuilder(controllerName: controllerName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Gateway/{controllerName}
     - 

     - :
       - type: http
       - name: Bearer
     - parameter controllerName: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiGatewayControllerNamePostWithRequestBuilder(controllerName: String) -> RequestBuilder<Void> {
        var path = "/api/Gateway/{controllerName}"
        let controllerNamePreEscape = "\(controllerName)"
        let controllerNamePostEscape = controllerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{controllerName}", with: controllerNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter controllerName: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayControllerNamePut(controllerName: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiGatewayControllerNamePutWithRequestBuilder(controllerName: controllerName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /api/Gateway/{controllerName}
     - 

     - :
       - type: http
       - name: Bearer
     - parameter controllerName: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiGatewayControllerNamePutWithRequestBuilder(controllerName: String) -> RequestBuilder<Void> {
        var path = "/api/Gateway/{controllerName}"
        let controllerNamePreEscape = "\(controllerName)"
        let controllerNamePostEscape = controllerNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{controllerName}", with: controllerNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter symbols: (query)  (optional)
     - parameter groupId: (query)  (optional, default to -1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayQuotesLatestGet(symbols: [String]? = nil, groupId: Int64? = nil, completion: @escaping ((_ data: [QuoteViewModel]?,_ error: Error?) -> Void)) {
        apiGatewayQuotesLatestGetWithRequestBuilder(symbols: symbols, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Gateway/quotes/latest
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "symbol" : "symbol",
  "ask" : 0.8008281904610115,
  "bid" : 6.027456183070403
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "symbol" : "symbol",
  "ask" : 0.8008281904610115,
  "bid" : 6.027456183070403
} ]}]
     - parameter symbols: (query)  (optional)
     - parameter groupId: (query)  (optional, default to -1)

     - returns: RequestBuilder<[QuoteViewModel]> 
     */
    open class func apiGatewayQuotesLatestGetWithRequestBuilder(symbols: [String]? = nil, groupId: Int64? = nil) -> RequestBuilder<[QuoteViewModel]> {
        let path = "/api/Gateway/quotes/latest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Symbols": symbols, 
                        "groupId": groupId?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[QuoteViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter symbols: (query)  (optional)
     - parameter groupId: (query)  (optional, default to -1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiGatewayQuotesPreviousdaylatestGet(symbols: [String]? = nil, groupId: Int64? = nil, completion: @escaping ((_ data: [QuoteViewModel]?,_ error: Error?) -> Void)) {
        apiGatewayQuotesPreviousdaylatestGetWithRequestBuilder(symbols: symbols, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Gateway/quotes/previousdaylatest
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "symbol" : "symbol",
  "ask" : 0.8008281904610115,
  "bid" : 6.027456183070403
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "symbol" : "symbol",
  "ask" : 0.8008281904610115,
  "bid" : 6.027456183070403
} ]}]
     - parameter symbols: (query)  (optional)
     - parameter groupId: (query)  (optional, default to -1)

     - returns: RequestBuilder<[QuoteViewModel]> 
     */
    open class func apiGatewayQuotesPreviousdaylatestGetWithRequestBuilder(symbols: [String]? = nil, groupId: Int64? = nil) -> RequestBuilder<[QuoteViewModel]> {
        let path = "/api/Gateway/quotes/previousdaylatest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "Symbols": symbols, 
                        "groupId": groupId?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[QuoteViewModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
