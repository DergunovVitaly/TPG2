//
// SocialTradingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SocialTradingAPI {
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingBecomeFollowerPost(body: BecomeFollowerModelBaseCreateApiRequest? = nil, completion: @escaping ((_ data: Int64BaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingBecomeFollowerPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/SocialTrading/become/follower
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : 0,
  "code" : 6,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Int64BaseApiResponse> 
     */
    open class func apiSocialTradingBecomeFollowerPostWithRequestBuilder(body: BecomeFollowerModelBaseCreateApiRequest? = nil) -> RequestBuilder<Int64BaseApiResponse> {
        let path = "/api/SocialTrading/become/follower"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Int64BaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Adds new pro trader according to params of the request object:   request.Object.AccountId, request.Object.CommissionType, request.Object.MinimunInvestedAmount, request.Object.Username

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingBecomeProtraderPost(body: BecomeProTraderModelBaseCreateApiRequest? = nil, completion: @escaping ((_ data: ProTraderBaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingBecomeProtraderPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds new pro trader according to params of the request object:   request.Object.AccountId, request.Object.CommissionType, request.Object.MinimunInvestedAmount, request.Object.Username
     - POST /api/SocialTrading/become/protrader
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : {
    "averageProfit" : 3.616076749251911,
    "accountId" : 6,
    "investedCapital" : 2.027123023002322,
    "popularity" : 4,
    "subscribersCount" : 7,
    "id" : 0,
    "commissionsAmount" : 5.637376656633329,
    "activeFrom" : "2000-01-23T04:56:07.000+00:00",
    "commissionType" : 1,
    "commissionValue" : 5,
    "minimumInvestedAmount" : 2.3021358869347655,
    "gain" : 9.301444243932576
  },
  "code" : 7,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ProTraderBaseApiResponse> 
     */
    open class func apiSocialTradingBecomeProtraderPostWithRequestBuilder(body: BecomeProTraderModelBaseCreateApiRequest? = nil) -> RequestBuilder<ProTraderBaseApiResponse> {
        let path = "/api/SocialTrading/become/protrader"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ProTraderBaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Returns summary of pro traders closed trades groupped by symbol groups

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingClosedTradesBySymbolGroupsGet(completion: @escaping ((_ data: StringDecimalIDictionaryBaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingClosedTradesBySymbolGroupsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns summary of pro traders closed trades groupped by symbol groups
     - GET /api/SocialTrading/closed_trades_by_symbol_groups
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : {
    "key" : 0.8008281904610115
  },
  "code" : 6,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]

     - returns: RequestBuilder<StringDecimalIDictionaryBaseApiResponse> 
     */
    open class func apiSocialTradingClosedTradesBySymbolGroupsGetWithRequestBuilder() -> RequestBuilder<StringDecimalIDictionaryBaseApiResponse> {
        let path = "/api/SocialTrading/closed_trades_by_symbol_groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StringDecimalIDictionaryBaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Returns summary of pro traders opened trades groupped by symbol groups

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingOpenedTradesBySymbolGroupsGet(completion: @escaping ((_ data: StringDecimalIDictionaryBaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingOpenedTradesBySymbolGroupsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns summary of pro traders opened trades groupped by symbol groups
     - GET /api/SocialTrading/opened_trades_by_symbol_groups
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : {
    "key" : 0.8008281904610115
  },
  "code" : 6,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]

     - returns: RequestBuilder<StringDecimalIDictionaryBaseApiResponse> 
     */
    open class func apiSocialTradingOpenedTradesBySymbolGroupsGetWithRequestBuilder() -> RequestBuilder<StringDecimalIDictionaryBaseApiResponse> {
        let path = "/api/SocialTrading/opened_trades_by_symbol_groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StringDecimalIDictionaryBaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Returns portfolio for the desired pro trader and updates popularity correspondingly in case it is viewed by subscriber

     - parameter proTraderId: (path) pro trader id 
     - parameter viewerAccountId: (path) subscriber id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingPortfolioProTraderIdViewerAccountIdGet(proTraderId: Int, viewerAccountId: Int, completion: @escaping ((_ data: SocialTradingPortfolioModelBaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingPortfolioProTraderIdViewerAccountIdGetWithRequestBuilder(proTraderId: proTraderId, viewerAccountId: viewerAccountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns portfolio for the desired pro trader and updates popularity correspondingly in case it is viewed by subscriber
     - GET /api/SocialTrading/portfolio/{proTraderId}/{viewerAccountId}
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : {
    "followersAmount" : 1,
    "country" : "country",
    "successfulTrades" : 9.301444243932576,
    "followersInvestedFunds" : 7.457744773683766,
    "image" : "image",
    "riskLevel" : 1.4658129805029452,
    "lastActive" : "2000-01-23T04:56:07.000+00:00",
    "gainByYear" : {
      "key" : 7.061401241503109
    },
    "profitRate" : 3.616076749251911,
    "closedTradesPercentsBySymbolGroups" : {
      "key" : 1.4894159098541704
    },
    "gain" : 6.027456183070403,
    "tradesAmount" : 5,
    "averageProfit" : 2.027123023002322,
    "recentlyClosedTrades" : [ {
      "volume" : 7.386281948385884,
      "symbol" : "symbol",
      "closedTradesAmount" : 1,
      "profit" : 4.145608029883936,
      "percentInClosedTrades" : 1.0246457001441578
    }, {
      "volume" : 7.386281948385884,
      "symbol" : "symbol",
      "closedTradesAmount" : 1,
      "profit" : 4.145608029883936,
      "percentInClosedTrades" : 1.0246457001441578
    } ],
    "investedCapital" : 5.637376656633329,
    "popularity" : 4,
    "openedTradesPercentsBySymbolGroups" : {
      "key" : 6.84685269835264
    },
    "id" : 0,
    "gainByMonth" : {
      "key" : 2.3021358869347655
    },
    "activeFrom" : "2000-01-23T04:56:07.000+00:00",
    "username" : "username",
    "openedTrades" : [ {
      "isBuy" : true,
      "tradeVolume" : 0.43431398824148815,
      "symbol" : "symbol",
      "reason" : 0,
      "volumeExt" : 4.86315908102884,
      "timeUpdate" : "2000-01-23T04:56:07.000+00:00",
      "swap" : 6.073898085781152,
      "externalId" : 1,
      "positionNumber" : 4,
      "volume" : 3.901545264248647,
      "accountId" : 4,
      "timeCreate" : "2000-01-23T04:56:07.000+00:00",
      "priceCurrent" : 0.5199002018724985,
      "digits" : 7,
      "contractSize" : 9,
      "priceOpen" : 9.702963800023566,
      "priceSL" : 7.933506881737151,
      "rateProfit" : 8.251625748923757,
      "comment" : "comment",
      "commission" : 2.9409642974827896,
      "id" : 6,
      "priceTP" : 5.507386964179881,
      "rateMargin" : 4.459605034958679
    }, {
      "isBuy" : true,
      "tradeVolume" : 0.43431398824148815,
      "symbol" : "symbol",
      "reason" : 0,
      "volumeExt" : 4.86315908102884,
      "timeUpdate" : "2000-01-23T04:56:07.000+00:00",
      "swap" : 6.073898085781152,
      "externalId" : 1,
      "positionNumber" : 4,
      "volume" : 3.901545264248647,
      "accountId" : 4,
      "timeCreate" : "2000-01-23T04:56:07.000+00:00",
      "priceCurrent" : 0.5199002018724985,
      "digits" : 7,
      "contractSize" : 9,
      "priceOpen" : 9.702963800023566,
      "priceSL" : 7.933506881737151,
      "rateProfit" : 8.251625748923757,
      "comment" : "comment",
      "commission" : 2.9409642974827896,
      "id" : 6,
      "priceTP" : 5.507386964179881,
      "rateMargin" : 4.459605034958679
    } ]
  },
  "code" : 5,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]
     - parameter proTraderId: (path) pro trader id 
     - parameter viewerAccountId: (path) subscriber id 

     - returns: RequestBuilder<SocialTradingPortfolioModelBaseApiResponse> 
     */
    open class func apiSocialTradingPortfolioProTraderIdViewerAccountIdGetWithRequestBuilder(proTraderId: Int, viewerAccountId: Int) -> RequestBuilder<SocialTradingPortfolioModelBaseApiResponse> {
        var path = "/api/SocialTrading/portfolio/{proTraderId}/{viewerAccountId}"
        let proTraderIdPreEscape = "\(proTraderId)"
        let proTraderIdPostEscape = proTraderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{proTraderId}", with: proTraderIdPostEscape, options: .literal, range: nil)
        let viewerAccountIdPreEscape = "\(viewerAccountId)"
        let viewerAccountIdPostEscape = viewerAccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{viewerAccountId}", with: viewerAccountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SocialTradingPortfolioModelBaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Increments popularity of the correpsponding pro trader by 1

     - parameter proTraderId: (path) ID of the pro trader 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingProtraderPopularityProTraderIdPut(proTraderId: Int, completion: @escaping ((_ data: BooleanBaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingProtraderPopularityProTraderIdPutWithRequestBuilder(proTraderId: proTraderId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Increments popularity of the correpsponding pro trader by 1
     - PUT /api/SocialTrading/protrader/popularity/{proTraderId}
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : true,
  "code" : 0,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]
     - parameter proTraderId: (path) ID of the pro trader 

     - returns: RequestBuilder<BooleanBaseApiResponse> 
     */
    open class func apiSocialTradingProtraderPopularityProTraderIdPutWithRequestBuilder(proTraderId: Int) -> RequestBuilder<BooleanBaseApiResponse> {
        var path = "/api/SocialTrading/protrader/popularity/{proTraderId}"
        let proTraderIdPreEscape = "\(proTraderId)"
        let proTraderIdPostEscape = proTraderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{proTraderId}", with: proTraderIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BooleanBaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Registers a new subscription of the correposnding subscriber to the desired pro trader with parameters specified by request  model.SubscriberAccountId, model.ProAccountUsername, model.Invested, model.StopLevel

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingProtraderSubscribeUsernamePost(body: SocialTradingSubscribeApiRequest? = nil, completion: @escaping ((_ data: SubscriptionBaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingProtraderSubscribeUsernamePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Registers a new subscription of the correposnding subscriber to the desired pro trader with parameters specified by request  model.SubscriberAccountId, model.ProAccountUsername, model.Invested, model.StopLevel
     - POST /api/SocialTrading/protrader/subscribe/username
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : {
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "openPL" : 7.061401241503109,
    "available" : 7.386281948385884,
    "copyPercentage" : 10,
    "proTraderCurrency" : "proTraderCurrency",
    "subscriberCurrency" : "subscriberCurrency",
    "commissionType" : 2,
    "closePL" : 2.3021358869347655,
    "stopLevel" : 93,
    "proTraderTpAccountId" : 6,
    "numberOfTrades" : 1,
    "id" : 0,
    "subscriberAccountId" : 1,
    "followFrom" : "2000-01-23T04:56:07.000+00:00",
    "invested" : 5.637376656633329,
    "currentValue" : 3.616076749251911,
    "status" : 5,
    "commissionPaid" : 4.145608029883936
  },
  "code" : 1,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<SubscriptionBaseApiResponse> 
     */
    open class func apiSocialTradingProtraderSubscribeUsernamePostWithRequestBuilder(body: SocialTradingSubscribeApiRequest? = nil) -> RequestBuilder<SubscriptionBaseApiResponse> {
        let path = "/api/SocialTrading/protrader/subscribe/username"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubscriptionBaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingProtraderUnsubscribeUsernamePost(body: SocialTradingUnsubscribeApiRequest? = nil, completion: @escaping ((_ data: Int64BaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingProtraderUnsubscribeUsernamePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/SocialTrading/protrader/unsubscribe/username
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : 0,
  "code" : 6,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Int64BaseApiResponse> 
     */
    open class func apiSocialTradingProtraderUnsubscribeUsernamePostWithRequestBuilder(body: SocialTradingUnsubscribeApiRequest? = nil) -> RequestBuilder<Int64BaseApiResponse> {
        let path = "/api/SocialTrading/protrader/unsubscribe/username"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Int64BaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Returns list of pro traders mathech to the criteria defined by request  Such as request.SymbolGroups, request.Country, request.MinGain, request.AverageProfitMin, request.AverageProfitMax

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingSearchPut(body: SocialTradingSearchRequest? = nil, completion: @escaping ((_ data: SocialTradingSearchModelIEnumerableBaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingSearchPutWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns list of pro traders mathech to the criteria defined by request  Such as request.SymbolGroups, request.Country, request.MinGain, request.AverageProfitMin, request.AverageProfitMax
     - PUT /api/SocialTrading/search
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "followersAmount" : 2,
    "country" : "country",
    "image" : "image",
    "riskLevel" : 5.962133916683182,
    "investedCapital" : 5.637376656633329,
    "id" : 0,
    "picture" : "picture",
    "username" : "username",
    "gain" : 6.027456183070403,
    "tradesAmount" : 1
  }, {
    "followersAmount" : 2,
    "country" : "country",
    "image" : "image",
    "riskLevel" : 5.962133916683182,
    "investedCapital" : 5.637376656633329,
    "id" : 0,
    "picture" : "picture",
    "username" : "username",
    "gain" : 6.027456183070403,
    "tradesAmount" : 1
  } ],
  "code" : 0,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<SocialTradingSearchModelIEnumerableBaseApiResponse> 
     */
    open class func apiSocialTradingSearchPutWithRequestBuilder(body: SocialTradingSearchRequest? = nil) -> RequestBuilder<SocialTradingSearchModelIEnumerableBaseApiResponse> {
        let path = "/api/SocialTrading/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SocialTradingSearchModelIEnumerableBaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Returns list if pro traders with the speicfied username prefix (strart to work from prefix length = 3)

     - parameter usernamePrefix: (path) pro trader username prefix 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingSearchUsernameStartswithUsernamePrefixGet(usernamePrefix: String, completion: @escaping ((_ data: SocialTradingSearchModelIEnumerableBaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingSearchUsernameStartswithUsernamePrefixGetWithRequestBuilder(usernamePrefix: usernamePrefix).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns list if pro traders with the speicfied username prefix (strart to work from prefix length = 3)
     - GET /api/SocialTrading/search_username_startswith/{usernamePrefix}
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : [ {
    "followersAmount" : 2,
    "country" : "country",
    "image" : "image",
    "riskLevel" : 5.962133916683182,
    "investedCapital" : 5.637376656633329,
    "id" : 0,
    "picture" : "picture",
    "username" : "username",
    "gain" : 6.027456183070403,
    "tradesAmount" : 1
  }, {
    "followersAmount" : 2,
    "country" : "country",
    "image" : "image",
    "riskLevel" : 5.962133916683182,
    "investedCapital" : 5.637376656633329,
    "id" : 0,
    "picture" : "picture",
    "username" : "username",
    "gain" : 6.027456183070403,
    "tradesAmount" : 1
  } ],
  "code" : 0,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]
     - parameter usernamePrefix: (path) pro trader username prefix 

     - returns: RequestBuilder<SocialTradingSearchModelIEnumerableBaseApiResponse> 
     */
    open class func apiSocialTradingSearchUsernameStartswithUsernamePrefixGetWithRequestBuilder(usernamePrefix: String) -> RequestBuilder<SocialTradingSearchModelIEnumerableBaseApiResponse> {
        var path = "/api/SocialTrading/search_username_startswith/{usernamePrefix}"
        let usernamePrefixPreEscape = "\(usernamePrefix)"
        let usernamePrefixPostEscape = usernamePrefixPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{usernamePrefix}", with: usernamePrefixPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SocialTradingSearchModelIEnumerableBaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Searches pro trader by its name

     - parameter username: (path) pro trader username 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSocialTradingSearchUsernameUsernameGet(username: String, completion: @escaping ((_ data: SocialTradingSearchModelBaseApiResponse?,_ error: Error?) -> Void)) {
        apiSocialTradingSearchUsernameUsernameGetWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Searches pro trader by its name
     - GET /api/SocialTrading/search_username/{username}
     - 

     - :
       - type: http
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "result" : {
    "followersAmount" : 2,
    "country" : "country",
    "image" : "image",
    "riskLevel" : 5.962133916683182,
    "investedCapital" : 5.637376656633329,
    "id" : 0,
    "picture" : "picture",
    "username" : "username",
    "gain" : 6.027456183070403,
    "tradesAmount" : 1
  },
  "code" : 7,
  "errorMessage" : "errorMessage",
  "isSuccessed" : true,
  "errors" : {
    "key" : "errors"
  }
}}]
     - parameter username: (path) pro trader username 

     - returns: RequestBuilder<SocialTradingSearchModelBaseApiResponse> 
     */
    open class func apiSocialTradingSearchUsernameUsernameGetWithRequestBuilder(username: String) -> RequestBuilder<SocialTradingSearchModelBaseApiResponse> {
        var path = "/api/SocialTrading/search_username/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SocialTradingSearchModelBaseApiResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
